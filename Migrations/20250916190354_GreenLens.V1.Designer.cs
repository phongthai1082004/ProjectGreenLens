// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectGreenLens.Infrastructure.dbContext;

#nullable disable

namespace ProjectGreenLens.Migrations
{
    [DbContext(typeof(GreenLensDbContext))]
    [Migration("20250916190354_GreenLens.V1")]
    partial class GreenLensV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.AIAdvicesLogs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("userPlantId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_AIAdvicesLogs_CreatedAt");

                    b.HasIndex("userId");

                    b.HasIndex("userPlantId");

                    b.ToTable("AIAdvicesLogs");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.ArModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("fileFormat")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("modelUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("plantId")
                        .HasColumnType("int");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_ArModels_CreatedAt");

                    b.HasIndex("plantId")
                        .IsUnique();

                    b.ToTable("ArModels");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CareHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("careDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("careType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("effectiveness")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("photoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quantity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userPlantId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("careDate")
                        .HasDatabaseName("IX_CareHistory_CareDate");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_CareHistories_CreatedAt");

                    b.HasIndex("userPlantId");

                    b.ToTable("CareHistories");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CaresSchedules", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("completedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("frequency")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("nextScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("scheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userPlantId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_CareSchedules_CreatedAt");

                    b.HasIndex("userPlantId");

                    b.ToTable("CareSchedules");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Guide", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("plantId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Guides_CreatedAt");

                    b.HasIndex("plantId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.LogEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_LogEntries_CreatedAt");

                    b.HasIndex("userId", "createdAt")
                        .HasDatabaseName("IX_LogEntry_UserCreated");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.NurseryProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("contactNumber")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("nurseryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_NurseryProfiles_CreatedAt");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("NurseryProfiles");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("processedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("transactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Payments_CreatedAt");

                    b.HasIndex("userId", "status", "createdAt")
                        .HasDatabaseName("IX_Payment_UserStatusCreated");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Permissions_CreatedAt");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to create plants",
                            isDelete = false,
                            name = "createPlant",
                            uniqueGuid = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to edit plants",
                            isDelete = false,
                            name = "editPlant",
                            uniqueGuid = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to delete plants",
                            isDelete = false,
                            name = "deletePlant",
                            uniqueGuid = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 4,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to view orders/payments",
                            isDelete = false,
                            name = "viewOrders",
                            uniqueGuid = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 5,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to manage users",
                            isDelete = false,
                            name = "manageUsers",
                            uniqueGuid = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 6,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Permission to send messages",
                            isDelete = false,
                            name = "sendMessages",
                            uniqueGuid = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Photo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("caption")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("photoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("plantId")
                        .HasColumnType("int");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Photos_CreatedAt");

                    b.HasIndex("plantId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<decimal?>("averagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("careInstructions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("commonName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("isIndoor")
                        .HasColumnType("bit");

                    b.Property<int>("lightRequirement")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("plantCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("scientificName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("soilType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("wateringFrequency")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Plants_CreatedAt");

                    b.HasIndex("plantCategoryId")
                        .HasDatabaseName("IX_Plant_CategoryId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_PlantCategories_CreatedAt");

                    b.ToTable("PlantCategories");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantDisease", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("prevention")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("symptoms")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_PlantDiseases_CreatedAt");

                    b.ToTable("PlantDiseases");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Roles_CreatedAt");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Administrator with full permissions",
                            isDelete = false,
                            name = "admin",
                            uniqueGuid = new Guid("11111111-1111-1111-1111-111111111111"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Regular user with limited permissions",
                            isDelete = false,
                            name = "user",
                            uniqueGuid = new Guid("22222222-2222-2222-2222-222222222222"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            description = "Nursery staff with specific permissions",
                            isDelete = false,
                            name = "nursery",
                            uniqueGuid = new Guid("33333333-3333-3333-3333-333333333333"),
                            updatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.RolePermission", b =>
                {
                    b.Property<int>("roleId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("permissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("roleId", "permissionId");

                    b.HasIndex("permissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            roleId = 1,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 2
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 3
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 4
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 5
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 6
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 4
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 6
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 2
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 4
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<string>("messageText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("receiverId")
                        .HasColumnType("int");

                    b.Property<int>("senderId")
                        .HasColumnType("int");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_UserMessages_CreatedAt");

                    b.HasIndex("senderId");

                    b.HasIndex("receiverId", "isRead", "createdAt")
                        .HasDatabaseName("IX_UserMessage_ReceiverReadCreated");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("acquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("currentLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("healthStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("nickname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("plantId")
                        .HasColumnType("int");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_UserPlants_CreatedAt");

                    b.HasIndex("plantId");

                    b.HasIndex("userId");

                    b.ToTable("UserPlants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("avatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("fullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_UserProfiles_CreatedAt");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("isRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_UserTokens_CreatedAt");

                    b.HasIndex("userId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.AIAdvicesLogs", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("aiAdvicesLogs")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("aiAdvicesLogs")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("user");

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.ArModel", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithOne("arModel")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.ArModel", "plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CareHistory", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("careHistories")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CaresSchedules", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("careSchedules")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Guide", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("guides")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.LogEntry", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("logEntries")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.NurseryProfile", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithOne("nurseryProfile")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.NurseryProfile", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Payment", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("payments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Photo", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("photos")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.PlantCategory", "plantCategory")
                        .WithMany("plants")
                        .HasForeignKey("plantCategoryId");

                    b.Navigation("plantCategory");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Permission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.Role", "role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserMessage", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "receiver")
                        .WithMany("receivedMessages")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.User", "sender")
                        .WithMany("sentMessages")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receiver");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("userPlants")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("userPlants")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithOne("userProfile")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.UserProfile", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserToken", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("userTokens")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Permission", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.Navigation("arModel");

                    b.Navigation("guides");

                    b.Navigation("photos");

                    b.Navigation("userPlants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantCategory", b =>
                {
                    b.Navigation("plants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Role", b =>
                {
                    b.Navigation("rolePermissions");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.Navigation("aiAdvicesLogs");

                    b.Navigation("logEntries");

                    b.Navigation("nurseryProfile");

                    b.Navigation("payments");

                    b.Navigation("receivedMessages");

                    b.Navigation("sentMessages");

                    b.Navigation("userPlants");

                    b.Navigation("userProfile");

                    b.Navigation("userTokens");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.Navigation("aiAdvicesLogs");

                    b.Navigation("careHistories");

                    b.Navigation("careSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
