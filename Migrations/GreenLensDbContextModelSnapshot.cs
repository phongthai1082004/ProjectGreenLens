// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectGreenLens.Infrastructure.dbContext;

#nullable disable

namespace ProjectGreenLens.Migrations
{
    [DbContext(typeof(GreenLensDbContext))]
    partial class GreenLensDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.AIAdvicesLogs", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("adviceText")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userPlantId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_aiAdvicesLogs_CreatedAt");

                    b.HasIndex("userPlantId");

                    b.ToTable("aiAdvicesLogs");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.ArModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("fileFormat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("modelUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("plantId")
                        .HasColumnType("integer");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_arModels_CreatedAt");

                    b.HasIndex("plantId")
                        .IsUnique();

                    b.ToTable("arModels");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CareHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("careDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("careType")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("effectiveness")
                        .HasColumnType("integer");

                    b.Property<string>("notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("photoUrl")
                        .HasColumnType("text");

                    b.Property<string>("quantity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userPlantId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("careDate")
                        .HasDatabaseName("IX_CareHistory_CareDate");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_careHistories_CreatedAt");

                    b.HasIndex("userPlantId", "careType", "careDate")
                        .HasDatabaseName("IX_CareHistory_Query");

                    b.ToTable("careHistories");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CaresSchedules", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("completedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("frequency")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<bool>("isCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("nextScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("scheduleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userPlantId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_caresSchedules_CreatedAt");

                    b.HasIndex("userPlantId", "scheduleTime", "isCompleted")
                        .HasDatabaseName("IX_CaresSchedules_Query");

                    b.ToTable("caresSchedules");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Guide", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("plantId")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_guides_CreatedAt");

                    b.HasIndex("plantId");

                    b.ToTable("guides");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.LogEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("metadata")
                        .HasColumnType("text");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_logEntries_CreatedAt");

                    b.HasIndex("userId", "createdAt")
                        .HasDatabaseName("IX_LogEntry_UserCreated");

                    b.ToTable("logEntries");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.NurseryProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("contactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("nurseryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_nurseryProfiles_CreatedAt");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("nurseryProfiles");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("processedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("transactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_payments_CreatedAt");

                    b.HasIndex("userId", "status", "createdAt")
                        .HasDatabaseName("IX_Payment_UserStatusCreated");

                    b.ToTable("payments", t =>
                        {
                            t.HasCheckConstraint("CK_Payment_PositiveAmount", "amount > 0");
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_permissions_CreatedAt");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3413),
                            description = "Permission to create plants",
                            name = "createPlant",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3414)
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3925),
                            description = "Permission to edit plants",
                            name = "editPlant",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3926)
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3927),
                            description = "Permission to delete plants",
                            name = "deletePlant",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3927)
                        },
                        new
                        {
                            id = 4,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3928),
                            description = "Permission to view orders/payments",
                            name = "viewOrders",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3929)
                        },
                        new
                        {
                            id = 5,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3929),
                            description = "Permission to manage users",
                            name = "manageUsers",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3930)
                        },
                        new
                        {
                            id = 6,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3931),
                            description = "Permission to send messages",
                            name = "sendMessages",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 840, DateTimeKind.Utc).AddTicks(3931)
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Photo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("caption")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("photoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("plantId")
                        .HasColumnType("integer");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_photos_CreatedAt");

                    b.HasIndex("plantId");

                    b.ToTable("photos");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal?>("averagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("careInstructions")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("commonName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("isIndoor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("lightRequirement")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<int?>("plantCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("scientificName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("soilType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("wateringFrequency")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_plants_CreatedAt");

                    b.HasIndex("plantCategoryId")
                        .HasDatabaseName("IX_Plant_CategoryId");

                    b.HasIndex("scientificName")
                        .IsUnique();

                    b.ToTable("plants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_plantCategories_CreatedAt");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("plantCategories");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantDisease", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("prevention")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("symptoms")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_plantDiseases_CreatedAt");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("plantDiseases");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_roles_CreatedAt");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(7581),
                            description = "Administrator with full permissions",
                            name = "admin",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(7583)
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(8314),
                            description = "Regular user with limited permissions",
                            name = "user",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(8314)
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(8316),
                            description = "Nursery staff with specific permissions",
                            name = "nursery",
                            uniqueGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            updatedAt = new DateTime(2025, 8, 8, 17, 57, 22, 839, DateTimeKind.Utc).AddTicks(8316)
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.RolePermission", b =>
                {
                    b.Property<int>("roleId")
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("permissionId")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("roleId", "permissionId");

                    b.HasIndex("permissionId");

                    b.ToTable("rolePermissions");

                    b.HasData(
                        new
                        {
                            roleId = 1,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 2
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 3
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 4
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 5
                        },
                        new
                        {
                            roleId = 1,
                            permissionId = 6
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 6
                        },
                        new
                        {
                            roleId = 2,
                            permissionId = 4
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 1
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 2
                        },
                        new
                        {
                            roleId = 3,
                            permissionId = 4
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("roleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_users_CreatedAt");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("roleId");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("isRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("messageText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("receiverId")
                        .HasColumnType("integer");

                    b.Property<int>("senderId")
                        .HasColumnType("integer");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_userMessages_CreatedAt");

                    b.HasIndex("senderId");

                    b.HasIndex("receiverId", "isRead", "createdAt")
                        .HasDatabaseName("IX_UserMessage_ReceiverReadCreated");

                    b.ToTable("userMessages", t =>
                        {
                            t.HasCheckConstraint("CK_UserMessage_DifferentUsers", "\"senderId\" != \"receiverId\"");
                        });
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("acquiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("currentLocation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("healthStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("plantId")
                        .HasColumnType("integer");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_userPlants_CreatedAt");

                    b.HasIndex("plantId");

                    b.HasIndex("userId", "plantId", "acquiredDate")
                        .HasDatabaseName("IX_UserPlant_Unique");

                    b.ToTable("userPlants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("avatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("fullName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("uniqueGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("createdAt")
                        .HasDatabaseName("IX_userProfiles_CreatedAt");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("userProfiles");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.AIAdvicesLogs", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("aiAdvicesLogs")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.ArModel", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithOne("arModel")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.ArModel", "plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CareHistory", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("careHistories")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.CaresSchedules", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.UserPlant", "userPlant")
                        .WithMany("careSchedules")
                        .HasForeignKey("userPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userPlant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Guide", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("guides")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.LogEntry", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("logEntries")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.NurseryProfile", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithOne("nurseryProfile")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.NurseryProfile", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Payment", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("payments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Photo", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("photos")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.PlantCategory", "plantCategory")
                        .WithMany("plants")
                        .HasForeignKey("plantCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("plantCategory");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Permission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("permissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.Role", "role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserMessage", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "receiver")
                        .WithMany("receivedMessages")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.User", "sender")
                        .WithMany("sentMessages")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receiver");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.Plant", "plant")
                        .WithMany("userPlants")
                        .HasForeignKey("plantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithMany("userPlants")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plant");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("ProjectGreenLens.Models.Entities.User", "user")
                        .WithOne("userProfile")
                        .HasForeignKey("ProjectGreenLens.Models.Entities.UserProfile", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Permission", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Plant", b =>
                {
                    b.Navigation("arModel");

                    b.Navigation("guides");

                    b.Navigation("photos");

                    b.Navigation("userPlants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.PlantCategory", b =>
                {
                    b.Navigation("plants");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.Role", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.User", b =>
                {
                    b.Navigation("logEntries");

                    b.Navigation("nurseryProfile");

                    b.Navigation("payments");

                    b.Navigation("receivedMessages");

                    b.Navigation("sentMessages");

                    b.Navigation("userPlants");

                    b.Navigation("userProfile");
                });

            modelBuilder.Entity("ProjectGreenLens.Models.Entities.UserPlant", b =>
                {
                    b.Navigation("aiAdvicesLogs");

                    b.Navigation("careHistories");

                    b.Navigation("careSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
