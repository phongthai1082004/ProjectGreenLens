using AutoMapper;
using ProjectGreenLens.Models.DTOs.AIAdvice;
using ProjectGreenLens.Models.DTOs.Auth;
using ProjectGreenLens.Models.DTOs.GuestAIAdvice;
using ProjectGreenLens.Models.DTOs.Guide;
using ProjectGreenLens.Models.DTOs.Plant;
using ProjectGreenLens.Models.DTOs.PlantPhoto;
using ProjectGreenLens.Models.Entities;
using ProjectGreenLens.Models.Non_userEntities;

namespace ProjectGreenLens.Infrastructure.Mapping
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // User mappings
            CreateMap<UserRegisterDto, UserAddDto>()
                .ForMember(dest => dest.passwordHash, opt => opt.Ignore()); // Will be hashed in service

            CreateMap<UserAddDto, User>()
                .ForMember(dest => dest.id, opt => opt.Ignore()) // Auto-generated by BaseEntity
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.isEmailVerified, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.role, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.payments, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userPlants, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userTokens, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.aiAdvicesLogs, opt => opt.Ignore()); // Navigation property

            CreateMap<User, UserResponseDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.username, opt => opt.MapFrom(src => src.username))
                .ForMember(dest => dest.email, opt => opt.MapFrom(src => src.email))
                .ForMember(dest => dest.roleId, opt => opt.MapFrom(src => src.roleId));

            CreateMap<UserUpdateDto, User>()
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.isEmailVerified, opt => opt.Ignore()) // Handled separately in service
                .ForMember(dest => dest.role, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.payments, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userPlants, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userTokens, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.aiAdvicesLogs, opt => opt.Ignore()) // Navigation property
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // UserToken mappings
            CreateMap<UserTokenAddDto, UserToken>()
                .ForMember(dest => dest.id, opt => opt.Ignore()) // Auto-generated by BaseEntity
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.user, opt => opt.Ignore()); // Navigation property

            CreateMap<UserToken, UserTokenResponseDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.token, opt => opt.MapFrom(src => src.token))
                .ForMember(dest => dest.expiresAt, opt => opt.MapFrom(src => src.expiresAt))
                .ForMember(dest => dest.isRevoked, opt => opt.MapFrom(src => src.isRevoked))
                .ForMember(dest => dest.type, opt => opt.MapFrom(src => src.type))
                .ForMember(dest => dest.userId, opt => opt.MapFrom(src => src.userId));

            CreateMap<UserTokenUpdateDto, UserToken>()
                .ForMember(dest => dest.token, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.expiresAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.type, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.userId, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.user, opt => opt.Ignore()) // Navigation property
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // Plant Entity -> PlantResponseDto
            CreateMap<Plant, PlantResponseDto>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.UniqueGuid, opt => opt.MapFrom(src => src.uniqueGuid))
                .ForMember(dest => dest.ScientificName, opt => opt.MapFrom(src => src.scientificName))
                .ForMember(dest => dest.CommonName, opt => opt.MapFrom(src => src.commonName))
                .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.description))
                .ForMember(dest => dest.CareInstructions, opt => opt.MapFrom(src => src.careInstructions))
                .ForMember(dest => dest.PlantCategoryId, opt => opt.MapFrom(src => src.plantCategoryId))
                .ForMember(dest => dest.PlantCategoryName, opt => opt.MapFrom(src => src.plantCategory != null ? src.plantCategory.name : null))
                .ForMember(dest => dest.IsIndoor, opt => opt.MapFrom(src => src.isIndoor))
                .ForMember(dest => dest.WateringFrequency, opt => opt.MapFrom(src => src.wateringFrequency))
                .ForMember(dest => dest.SoilType, opt => opt.MapFrom(src => src.soilType))
                .ForMember(dest => dest.AveragePrice, opt => opt.MapFrom(src => src.averagePrice))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.createdAt))
                .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.updatedAt))
                .ForMember(dest => dest.Photos, opt => opt.MapFrom(src => src.photos))
                .ForMember(dest => dest.Guides, opt => opt.MapFrom(src => src.guides));

            // PlantAddDto -> Plant Entity
            CreateMap<PlantAddDto, Plant>()
                .ForMember(dest => dest.scientificName, opt => opt.MapFrom(src => src.ScientificName))
                .ForMember(dest => dest.commonName, opt => opt.MapFrom(src => src.CommonName))
                .ForMember(dest => dest.description, opt => opt.MapFrom(src => src.Description))
                .ForMember(dest => dest.careInstructions, opt => opt.MapFrom(src => src.CareInstructions))
                .ForMember(dest => dest.plantCategoryId, opt => opt.MapFrom(src => src.PlantCategoryId))
                .ForMember(dest => dest.isIndoor, opt => opt.MapFrom(src => src.IsIndoor))
                .ForMember(dest => dest.wateringFrequency, opt => opt.MapFrom(src => src.WateringFrequency))
                .ForMember(dest => dest.soilType, opt => opt.MapFrom(src => src.SoilType))
                .ForMember(dest => dest.averagePrice, opt => opt.MapFrom(src => src.AveragePrice))
                .ForMember(dest => dest.id, opt => opt.Ignore())
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore())
                .ForMember(dest => dest.createdAt, opt => opt.Ignore())
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.isDelete, opt => opt.Ignore())
                .ForMember(dest => dest.deletedAt, opt => opt.Ignore())
                .ForMember(dest => dest.plantCategory, opt => opt.Ignore())
                .ForMember(dest => dest.photos, opt => opt.Ignore())
                .ForMember(dest => dest.guides, opt => opt.Ignore())
                .ForMember(dest => dest.userPlants, opt => opt.Ignore());

            // PlantUpdateDto -> Plant Entity
            CreateMap<PlantUpdateDto, Plant>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.scientificName, opt => opt.MapFrom(src => src.ScientificName))
                .ForMember(dest => dest.commonName, opt => opt.MapFrom(src => src.CommonName))
                .ForMember(dest => dest.description, opt => opt.MapFrom(src => src.Description))
                .ForMember(dest => dest.careInstructions, opt => opt.MapFrom(src => src.CareInstructions))
                .ForMember(dest => dest.plantCategoryId, opt => opt.MapFrom(src => src.PlantCategoryId))
                .ForMember(dest => dest.isIndoor, opt => opt.MapFrom(src => src.IsIndoor))
                .ForMember(dest => dest.wateringFrequency, opt => opt.MapFrom(src => src.WateringFrequency))
                .ForMember(dest => dest.soilType, opt => opt.MapFrom(src => src.SoilType))
                .ForMember(dest => dest.averagePrice, opt => opt.MapFrom(src => src.AveragePrice))
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore())
                .ForMember(dest => dest.createdAt, opt => opt.Ignore())
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.isDelete, opt => opt.Ignore())
                .ForMember(dest => dest.deletedAt, opt => opt.Ignore())
                .ForMember(dest => dest.plantCategory, opt => opt.Ignore())
                .ForMember(dest => dest.photos, opt => opt.Ignore())
                .ForMember(dest => dest.guides, opt => opt.Ignore())
                .ForMember(dest => dest.userPlants, opt => opt.Ignore());

            CreateMap<Photo, PhotoResponseDto>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.PhotoUrl, opt => opt.MapFrom(src => src.photoUrl))
                .ForMember(dest => dest.Caption, opt => opt.MapFrom(src => src.caption));

            CreateMap<Guide, GuideResponseDto>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.Title, opt => opt.MapFrom(src => src.title))
                .ForMember(dest => dest.Content, opt => opt.MapFrom(src => src.content));

            // AIAdvicesLogs -> AIAdviceResponseDto
            CreateMap<AIAdvicesLogs, AIAdviceResponseDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.createdAt, opt => opt.MapFrom(src => src.createdAt))
                .ForMember(dest => dest.isDelete, opt => opt.MapFrom(src => src.isDelete))
                .ForMember(dest => dest.userId, opt => opt.MapFrom(src => src.userId))
                .ForMember(dest => dest.userPlantId, opt => opt.MapFrom(src => src.userPlantId))
                .ForMember(dest => dest.role, opt => opt.MapFrom(src => src.role))
                .ForMember(dest => dest.content, opt => opt.MapFrom(src => src.content));

            // AIAdviceAddDto -> AIAdvicesLogs (giữ nguyên như cũ)
            CreateMap<AIAdviceAddDto, AIAdvicesLogs>()
                .ForMember(dest => dest.userId, opt => opt.MapFrom(src => src.userId))
                .ForMember(dest => dest.userPlantId, opt => opt.MapFrom(src => src.userPlantId))
                .ForMember(dest => dest.role, opt => opt.MapFrom(src => src.role))
                .ForMember(dest => dest.content, opt => opt.MapFrom(src => src.content))
                .ForMember(dest => dest.id, opt => opt.Ignore())
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore())
                .ForMember(dest => dest.createdAt, opt => opt.Ignore())
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.isDelete, opt => opt.Ignore())
                .ForMember(dest => dest.deletedAt, opt => opt.Ignore())
                .ForMember(dest => dest.user, opt => opt.Ignore())
                .ForMember(dest => dest.userPlant, opt => opt.Ignore());

            // AIAdviceUpdateDto -> AIAdvicesLogs (giữ nguyên như cũ)
            CreateMap<AIAdviceUpdateDto, AIAdvicesLogs>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.userPlantId, opt => opt.MapFrom(src => src.userPlantId))
                .ForMember(dest => dest.role, opt => opt.MapFrom(src => src.role))
                .ForMember(dest => dest.content, opt => opt.MapFrom(src => src.content))
                .ForMember(dest => dest.userId, opt => opt.Ignore())
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore())
                .ForMember(dest => dest.createdAt, opt => opt.Ignore())
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.isDelete, opt => opt.Ignore())
                .ForMember(dest => dest.deletedAt, opt => opt.Ignore())
                .ForMember(dest => dest.user, opt => opt.Ignore())
                .ForMember(dest => dest.userPlant, opt => opt.Ignore());

            CreateMap<AIAdvicesLogs, AIAdviceResponseDto>()
                .ForMember(dest => dest.userPlantId, opt => opt.MapFrom(src => src.userPlantId))
                .ForMember(dest => dest.plantId, opt => opt.MapFrom(src => src.plantId))
                .ForMember(dest => dest.role, opt => opt.MapFrom(src => src.role))
                .ForMember(dest => dest.content, opt => opt.MapFrom(src => src.content))
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.createdAt, opt => opt.MapFrom(src => src.createdAt))
                .ForMember(dest => dest.isDelete, opt => opt.MapFrom(src => src.isDelete))
                .ForMember(dest => dest.userId, opt => opt.MapFrom(src => src.userId));

            CreateMap<AIAdviceAddDto, AIAdvicesLogs>();
            CreateMap<AIAdviceUpdateDto, AIAdvicesLogs>();
            CreateMap<AIAdvicesLogs, LastMessageDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.userPlantId, opt => opt.MapFrom(src => src.userPlantId))
                .ForMember(dest => dest.plantId, opt => opt.MapFrom(src => src.plantId))
                .ForMember(dest => dest.plantName, opt => opt.MapFrom(src => src.userPlant != null ? src.userPlant.plant.scientificName : src.plant != null ? src.plant.scientificName : null))
                .ForMember(dest => dest.content, opt => opt.MapFrom(src => src.content))
                .ForMember(dest => dest.createdAt, opt => opt.MapFrom(src => src.createdAt));


            // Entity -> DTO
            CreateMap<AIAdvicesLogs, AIAdviceResponseDto>();

            // DTO -> Entity (nếu cần)
            CreateMap<AIAdviceResponseDto, AIAdvicesLogs>();

            // GuestAIAdvicesLog <-> GuestAIAdviceResponseDto
            CreateMap<GuestAIAdvicesLog, GuestAIAdviceResponseDto>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.GuestToken, opt => opt.MapFrom(src => src.GuestToken))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role))
                .ForMember(dest => dest.Content, opt => opt.MapFrom(src => src.Content))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.createdAt))
                .ForMember(dest => dest.UserPlantId, opt => opt.MapFrom(src => src.UserPlantId));

            // GuestAIAdviceRequestDto -> GuestAIAdvicesLog (lưu câu hỏi của guest)
            CreateMap<GuestAIAdviceRequestDto, GuestAIAdvicesLog>()
                .ForMember(dest => dest.GuestToken, opt => opt.MapFrom(src => src.GuestToken))
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => "user"))
                .ForMember(dest => dest.Content, opt => opt.MapFrom(src => src.Content))
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.UserPlantId, opt => opt.MapFrom(src => src.UserPlantId))
                .ForMember(dest => dest.id, opt => opt.Ignore()); // Auto-generated by BaseEntity
        }
    }
}