using AutoMapper;
using ProjectGreenLens.Models.DTOs.Auth;
using ProjectGreenLens.Models.Entities;

namespace ProjectGreenLens.Infrastructure.Mapping
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // User mappings
            CreateMap<UserRegisterDto, UserAddDto>()
                .ForMember(dest => dest.passwordHash, opt => opt.Ignore()); // Will be hashed in service

            CreateMap<UserAddDto, User>()
                .ForMember(dest => dest.id, opt => opt.Ignore()) // Auto-generated by BaseEntity
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.isEmailVerified, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.role, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.logEntries, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.payments, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.nurseryProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userPlants, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.sentMessages, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.receivedMessages, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userTokens, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.aiAdvicesLogs, opt => opt.Ignore()); // Navigation property

            CreateMap<User, UserResponseDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.username, opt => opt.MapFrom(src => src.username))
                .ForMember(dest => dest.email, opt => opt.MapFrom(src => src.email))
                .ForMember(dest => dest.roleId, opt => opt.MapFrom(src => src.roleId));

            CreateMap<UserUpdateDto, User>()
                .ForMember(dest => dest.uniqueGuid, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.isEmailVerified, opt => opt.Ignore()) // Handled separately in service
                .ForMember(dest => dest.role, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.logEntries, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.payments, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.nurseryProfile, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userPlants, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.sentMessages, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.receivedMessages, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.userTokens, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.aiAdvicesLogs, opt => opt.Ignore()) // Navigation property
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // UserToken mappings
            CreateMap<UserTokenAddDto, UserToken>()
                .ForMember(dest => dest.id, opt => opt.Ignore()) // Auto-generated by BaseEntity
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.user, opt => opt.Ignore()); // Navigation property

            CreateMap<UserToken, UserTokenResponseDto>()
                .ForMember(dest => dest.id, opt => opt.MapFrom(src => src.id))
                .ForMember(dest => dest.token, opt => opt.MapFrom(src => src.token))
                .ForMember(dest => dest.expiresAt, opt => opt.MapFrom(src => src.expiresAt))
                .ForMember(dest => dest.isRevoked, opt => opt.MapFrom(src => src.isRevoked))
                .ForMember(dest => dest.type, opt => opt.MapFrom(src => src.type))
                .ForMember(dest => dest.userId, opt => opt.MapFrom(src => src.userId));

            CreateMap<UserTokenUpdateDto, UserToken>()
                .ForMember(dest => dest.token, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.expiresAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.type, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.userId, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.createdAt, opt => opt.Ignore()) // Should not be updated
                .ForMember(dest => dest.updatedAt, opt => opt.Ignore()) // Set manually in service
                .ForMember(dest => dest.user, opt => opt.Ignore()) // Navigation property
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));
        }
    }
}